<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.2.5.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <!--

    * * * Docker must be installed to perform integration and end-to-end functional testing. * * *


    # Example development workflow tasks

    Note that JUnit5 is used to perform unit, integration and end-to-end functional testing.
    Test cases need to be tagged with 'Unit', 'Integration' or 'System' to be included in
    the correct test phase. Example: `@UnitTest`, `@IntegrationTest` and `@SystemTest`.

    Note: SUT == system under test

    - Compile and unit test:

        $ mvn clean test -Dbuildtime.output.log

    - Perform checkstyle check:

        $ mvn checkstyle:check

    - Perform integration testing using docker hosted dependencies. SUT runs as a JAR.

        $ mvn clean verify -Dbuildtime.output.log

    - End-to-end testing using Docker containers for dependencies and SUT:

        $ mvn clean verify -P end-to-end -Dbuildtime.output.log

    - Dockerize service (does not publish to container registry):

        $ mvn clean package -P docker-build -Dbuildtime.output.log
  -->

  <groupId>com.example</groupId>
  <artifactId>demo-gateway</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>demo-gateway</name>
  <description>Demo project for Spring Boot</description>

  <properties>
    <!--
        java.version is a SpringBoot plugin property that manages the source and target compiler settings.
        Typically '1.8' or '11'.
    -->
    <java.version>11</java.version>

    <!--
      For pipeline builds: mvn clean package -Drevision.buildId=${buildID}

      where ${buildID} is an increasing build number managed by the build system or
      generated from Git. Example: `$(git describe ==tags || git rev-parse ==short HEAD)`

      To drop '-SNAPSHOT': mvn clean package -Drevision.buildId=${buildID} -Dchangelist=
    -->
    <revision.major>1</revision.major>
    <revision.minor>0</revision.minor>
    <revision.buildId>0</revision.buildId>
    <revision>${revision.major}.${revision.minor}.${revision.buildId}</revision>
    <changelist>-SNAPSHOT</changelist>

    <!-- dependency versions not managed by Spring Boot's BOM -->
    <org.mapstruct.version>1.3.1.Final</org.mapstruct.version>
    <org.projectlombok.version>1.18.12</org.projectlombok.version>
    <org.apache.avro.version>1.11.3</org.apache.avro.version>
    <io.confluent.version>5.4.0</io.confluent.version>

    <!-- Default test tag used for maven-failsafe-plugin -->
    <junit.tag>Integration</junit.tag>

    <!-- docker related variables -->
    <docker.build.skip>true</docker.build.skip>
    <docker.image>scrs/${project.artifactId}</docker.image>

    <!-- Unneeded lifecycles. The fat jar file is packaged within a docker image. -->
    <skip.install>true</skip.install>
    <skip.deploy>true</skip.deploy>
  </properties>

  <dependencies>

    <!-- A P P L I C A T I O N -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>${org.mapstruct.version}</version>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${org.projectlombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Avro support -->
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
      <version>${org.apache.avro.version}</version>
    </dependency>

    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-avro-serializer</artifactId>
      <version>${io.confluent.version}</version>
    </dependency>

    <!-- T E S T -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <!-- Use JUnit5; exclude JUnit4 support. -->
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>1.12.5</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>1.12.5</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka-test</artifactId>
    </dependency>

    <!-- B U I L D -->

    <!--
      ====== maven-buildtime-extension ======

      Reports the timing to execute each maven goal to the output. Note that this extension
      requires a file created under <projectroot>/.mvn/extensions.xml. To get a build goal
      timing report, include `-Dbuildtime.output.log=true` in the maven command.

      Example usage:

      mvn clean verify -Dbuildtime.output.log=true
    -->
    <dependency>
      <groupId>co.leantechniques</groupId>
      <artifactId>maven-buildtime-extension</artifactId>
      <version>3.0.3</version>
    </dependency>

    <!-- enables intellisense for configuration properties -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <scope>provided</scope>
    </dependency>

  </dependencies>


  <!-- P R O F I L E S -->

  <!--

    Profiles are created to facilitate running build pipeline steps locally on developer
    workstations. Tasks that should never be executed on a developer workstation are
    intended to be implemented within the build pipeline and not included as a Maven profile.

  -->
  <profiles>

    <!--
        When the end-to-end profile is active, the maven-failsafe-plugin will be flipped from performing
        integration tests to performing end-to-end tests.

        maven verify -P end-to-end
    -->
    <profile>
      <id>end-to-end</id>
      <properties>
        <junit.tag>EndToEnd</junit.tag>
        <docker.build.skip>false</docker.build.skip>
      </properties>
    </profile>

    <!--
        When the build-docker profile is active, a docker image for the service
        will be created during the package phase.

        maven package -P docker-build
    -->
    <profile>
      <id>docker-build</id>
      <properties>
        <docker.build.skip>false</docker.build.skip>
      </properties>
    </profile>

  </profiles>


  <build>
    <plugins>

      <!--
        ====== spring-boot-maven-plugin ======

        Configures the Spring Boot plugin to generate build-info that is used to
        populate the /actuator/info endpoint.

        Example usage:

        mvn compile

      -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <executions>
          <!-- Generate data for /actuator/info endpoint -->
          <execution>
            <id>build-info</id>
            <goals>
              <goal>build-info</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!--
        ====== git-commit-id-plugin ======

        Populates /actuator/info with Git tag information when the compile phase is executed.

        Example usage:

        mvn compile

      -->
      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <executions>
          <execution>
            <phase>compile</phase>
            <goals>
              <goal>revision</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!--
        ====== avro-maven-plugin ======

        Compiles .avsc Avro files into Java classes.

        Example usage:

        mvn clean generate-sources

      -->
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <version>${org.apache.avro.version}</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>schema</goal>
            </goals>
            <configuration>
              <sourceDirectory>${project.basedir}/src/main/avro</sourceDirectory>
              <outputDirectory>${project.build.directory}/generated-sources/avro</outputDirectory>
              <stringType>String</stringType>
              <createSetters>true</createSetters>
              <enableDecimalLogicalType>true</enableDecimalLogicalType>
              <fieldVisibility>private</fieldVisibility>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
          ====== maven-compiler-plugin ======

          Compiles code for the specified java.version and incorporates code generation for
          mapstruct and Lombok.

          Example usage:

          mvn compile

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <annotationProcessorPaths>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${org.mapstruct.version}</version>
            </path>

            <!-- other annotation processors -->

            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${org.projectlombok.version}</version>
            </path>

          </annotationProcessorPaths>

          <compilerArgs>
            <!-- Annotate mapper classes with Spring bean '@Component' -->
            <compilerArg>-Amapstruct.defaultComponentModel=spring</compilerArg>
          </compilerArgs>

        </configuration>
      </plugin>

      <!--
        ====== maven-checkstyle-plugin ======

        Performs code checkstyle during the check goal.

        Example usage:

        mvn checkstyle:check

        Uses google coding style:
        https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml

        TODO: Need to generate a report and integrate output into pipeline.

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <configLocation>google_checks.xml</configLocation>
          <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
          <outputFile>${project.build.directory}/checkstyle/checkstyle-result.xml</outputFile>
          <encoding>UTF-8</encoding>
          <includeTestSourceDirectory>false</includeTestSourceDirectory>
          <consoleOutput>true</consoleOutput>
          <failsOnError>true</failsOnError>
          <!-- TODO: Are warning failures too annoying? -->
          <violationSeverity>warning</violationSeverity>
          <linkXRef>false</linkXRef>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
        ====== maven-pmd-plugin ======

        Performs static code analysis.

        TODO: Produce a report and integrate output into pipeline.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>3.13.0</version>
        <configuration>
          <failOnViolation>false</failOnViolation>
          <linkXRef>false</linkXRef>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!--
          ====== maven-failsafe-plugin ======

          Performs either integration or end-to-end testing. The default mode will be to execute
          integration tests (JUnit5 tests tagged with 'Integration').

          To perform end-to-end tests, execute the end-to-end profile which will change the target tag
          from 'Integration' to 'System'.

          Note that the default class naming conventions for integration tests has been removed and now
          solely relies on JUnit5 tags to select the appropriate test cases.

          Example usage:

              mvn verify                      # executes integration tests
              mvn verify -P end-to-end        # executes end-to-end tests

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <configuration>
          <!--
              Override default class naming conventions. Rely on JUnit5 tags instead
          -->
          <includes>
            <include>**/*.class</include>
          </includes>
          <!--
              Select between tests tagged with 'Integration' or 'EndToEnd'
          -->
          <groups>${junit.tag}</groups>
          <excludedGroups>Unit</excludedGroups>
        </configuration>
      </plugin>


      <!--
          ====== maven-surefire-plugin ======

          Configured to execute unit test cases tagged with JUnit tag 'Unit'.

          Example usage:

          mvn test        # executes all unit tests tagged with 'Unit'

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- Execute only tests tagged as Unit -->
          <groups>Unit</groups>
          <!-- Skip any tests tagged as integration or end-to-end -->
          <excludedGroups>Integration, EndToEnd</excludedGroups>
        </configuration>
      </plugin>


      <!--
          ====== maven-antrun-plugin ======

          A collection of ant tasks attached to an appropriate maven phase and skipped by default.
          Maven profiles are used to enable the execution of the ant tasks.

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <!--
              docker-build will generate a docker image for the service.

              mvn package -P docker-build

          -->
          <execution>
            <id>docker-build</id>
            <phase>package</phase>
            <goals>
              <goal>run</goal>
            </goals>

            <configuration>
              <target>

                <echo message="-------------------------------------------------------"/>
                <echo message="D O C K E R I Z I N G - ${project.build.finalName}.jar"/>
                <echo message="-------------------------------------------------------"/>

                <!-- TODO: Need to trap errors and abort the build -->
                <exec executable="docker">

                  <arg value="build"/>

                  <!-- pass the final output JAR name to the docker build command -->
                  <arg value="--build-arg"/>
                  <arg value="JAR_NAME=${project.build.finalName}.jar"/>

                  <!-- tag the docker image; multiple tags can be specified if needed -->
                  <arg value="-t"/>
                  <arg value="${docker.image}:${project.version}"/>
                  <!-- this tag is used for end-to-end testing; not intended for container registry -->
                  <arg value="-t"/>
                  <arg value="${docker.image}:e2e"/>

                  <!-- Specify where to find Dockerfile relative to build context '.' -->
                  <arg value="-f"/>
                  <arg value="./src/main/docker/Dockerfile"/>

                  <!-- build context should be at root folder -->
                  <arg value="."/>
                </exec>

                <!--
                    Consider if pushing to docker registry makes sense here or if publishing
                    should only be performed from build pipeline. If only appropriate from the
                    build pipeline, there may be no need to complicate the pom.xml with
                    additional tasks that shouldn't be performed locally by developers.
                 -->

              </target>
              <skip>${docker.build.skip}</skip>
            </configuration>

          </execution>

          <!-- TODO: Experimenting with buildId auto-generation -->
          <execution>
            <id>buildId</id>
            <phase>initialize</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <echo message="==== Generating buildId ===="/>
                <exec executable="git" outputproperty="revision.buildId">
                  <arg value="rev-parse"/>
                  <arg value="--short"/>
                  <arg value="HEAD"/>
                </exec>
              </target>
              <exportAntProperties>true</exportAntProperties>
            </configuration>
          </execution>

        </executions>
      </plugin>


      <!--
        ====== maven-install-plugin ======

        Disable the install plugin. Local repository install is only needed for libraries.

      -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <executions>
          <execution>
            <id>default-install</id>
            <phase>none</phase>
          </execution>
        </executions>
        <configuration>
          <skip>${skip.install}</skip>
        </configuration>
      </plugin>

      <!--
        ====== maven-deploy-plugin ======

        Disable the deploy plugin. The deployable unit is a containerized fat jar
        which will be handled by the build pipeline.

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <executions>
          <execution>
            <id>default-deploy</id>
            <phase>none</phase>
          </execution>
        </executions>
        <configuration>
          <skip>${skip.deploy}</skip>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <repositories>
    <!-- Necessary to resolve confluent dependencies -->
    <repository>
      <id>confluent</id>
      <url>http://packages.confluent.io/maven/</url>
    </repository>
  </repositories>
</project>
