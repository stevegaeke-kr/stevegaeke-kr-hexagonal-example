<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.2.5.RELEASE</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>com.example</groupId>
  <artifactId>demo-gateway</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>demo-gateway</name>
  <description>Demo project for Spring Boot</description>

  <properties>
    <!--
        java.version is a SpringBoot plugin property that manages the source and target compiler settings.
        Typically '1.8' or '11'.
    -->
    <java.version>11</java.version>

    <suppressions.xml>${project.basedir}/checkstyle-suppressions2.xml</suppressions.xml>

    <!--
      For pipeline builds: mvn clean package -Drevision.buildId=${buildID}

      where ${buildID} is an increasing build number managed by the build system or
      generated from Git. Example: `$(git describe ==tags || git rev-parse ==short HEAD)`

      To drop '-SNAPSHOT': mvn clean package -Drevision.buildId=${buildID} -Dchangelist=
    -->
    <revision.major>1</revision.major>
    <revision.minor>0</revision.minor>
    <revision.buildId>0</revision.buildId>
    <revision>${revision.major}.${revision.minor}.${revision.buildId}</revision>
    <changelist>-SNAPSHOT</changelist>

    <!-- dependency versions not managed by Spring Boot's BOM -->
    <org.mapstruct.version>1.3.1.Final</org.mapstruct.version>
    <org.projectlombok.version>1.18.12</org.projectlombok.version>
    <org.apache.avro.version>1.9.2</org.apache.avro.version>
    <io.confluent.version>5.4.0</io.confluent.version>

    <!-- Default test tag run for maven-failsafe-plugin -->
    <junit.tag>Integration</junit.tag>

    <!-- Unneeded lifecycles -->
    <skip.install>true</skip.install>
    <skip.deploy>true</skip.deploy>
  </properties>

  <dependencies>

    <!--
        ====== Begin application dependencies ======
    -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-configuration-processor</artifactId>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>${org.mapstruct.version}</version>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${org.projectlombok.version}</version>
      <scope>provided</scope>
    </dependency>

    <!-- Avro support -->
    <dependency>
      <groupId>org.apache.avro</groupId>
      <artifactId>avro</artifactId>
      <version>${org.apache.avro.version}</version>
    </dependency>

    <dependency>
      <groupId>io.confluent</groupId>
      <artifactId>kafka-avro-serializer</artifactId>
      <version>${io.confluent.version}</version>
    </dependency>

    <!--
      ====== Begin test dependencies ======
    -->

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
      <!-- Use JUnit5; exclude JUnit4 support. -->
      <exclusions>
        <exclusion>
          <groupId>org.junit.vintage</groupId>
          <artifactId>junit-vintage-engine</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>testcontainers</artifactId>
      <version>1.12.5</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>1.12.5</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework.kafka</groupId>
      <artifactId>spring-kafka-test</artifactId>
    </dependency>

  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <executions>
          <!-- Generate data for /actuator/info endpoint -->
          <execution>
            <id>build-info</id>
            <goals>
              <goal>build-info</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
        ====== avro-maven-plugin ======

        Compiles .avsc Avro files into Java classes.

        Example usage:

        mvn clean generate-sources

      -->
      <plugin>
        <groupId>org.apache.avro</groupId>
        <artifactId>avro-maven-plugin</artifactId>
        <version>${org.apache.avro.version}</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>schema</goal>
<!--              <goal>protocol</goal>-->
<!--              <goal>idl-protocol</goal>-->
            </goals>
            <configuration>
              <sourceDirectory>${project.basedir}/src/main/avro</sourceDirectory>
              <outputDirectory>${project.build.directory}/generated-sources/avro</outputDirectory>
              <stringType>String</stringType>
              <createSetters>false</createSetters>
              <enableDecimalLogicalType>true</enableDecimalLogicalType>
              <fieldVisibility>private</fieldVisibility>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!--
          ====== maven-compiler-plugin ======

          Compiles code for the specified java.version and incorporates code generation for
          mapstruct and Lombok.

          Example usage:

          mvn compile

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <annotationProcessorPaths>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${org.mapstruct.version}</version>
            </path>

            <!-- other annotation processors -->

            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${org.projectlombok.version}</version>
            </path>

          </annotationProcessorPaths>

          <compilerArgs>
            <!-- Annotate mapper classes with Spring bean '@Component' -->
            <compilerArg>-Amapstruct.defaultComponentModel=spring</compilerArg>
          </compilerArgs>

        </configuration>
      </plugin>

      <!--
        ====== maven-checkstyle-plugin ======

        Performs code checkstyle during the check goal.

        Example usage:

        mvn checkstyle:check

        Uses google coding style:
        https://github.com/checkstyle/checkstyle/blob/master/src/main/resources/google_checks.xml

        TODO: Need to generate a report and integrate output into pipeline.

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-checkstyle-plugin</artifactId>
        <version>3.1.1</version>
        <configuration>
          <configLocation>google_checks.xml</configLocation>
          <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
          <outputFile>${project.build.directory}/checkstyle/checkstyle-result.xml</outputFile>
          <encoding>UTF-8</encoding>
          <includeTestSourceDirectory>false</includeTestSourceDirectory>
          <consoleOutput>true</consoleOutput>
          <failsOnError>true</failsOnError>
          <!-- TODO: Are warning failures too annoying? -->
          <violationSeverity>warning</violationSeverity>
          <linkXRef>false</linkXRef>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!--
        ====== maven-pmd-plugin ======

        Performs static code analysis.

        TODO: Produce a report and integrate output into pipeline.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-pmd-plugin</artifactId>
        <version>3.13.0</version>
        <configuration>
          <failOnViolation>false</failOnViolation>
          <linkXRef>false</linkXRef>
        </configuration>
        <executions>
          <execution>
            <id>validate</id>
            <phase>validate</phase>
            <goals>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>


      <!--
        ====== maven-install-plugin ======

        Disable the install plugin. Local repository install is only needed for libraries.

      -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-install-plugin</artifactId>
        <executions>
          <execution>
            <id>default-install</id>
            <phase>none</phase>
          </execution>
        </executions>
        <configuration>
          <skip>${skip.install}</skip>
        </configuration>
      </plugin>

      <!--
        ====== maven-deploy-plugin ======

        Disable the deploy plugin. The deployable unit is a containerized fat jar
        which will be handled by the build pipeline.

      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <executions>
          <execution>
            <id>default-deploy</id>
            <phase>none</phase>
          </execution>
        </executions>
        <configuration>
          <skip>${skip.deploy}</skip>
        </configuration>
      </plugin>

    </plugins>
  </build>

  <repositories>
    <!-- Necessary to resolve confluent dependencies -->
    <repository>
      <id>confluent</id>
      <url>http://packages.confluent.io/maven/</url>
    </repository>
  </repositories>
</project>
